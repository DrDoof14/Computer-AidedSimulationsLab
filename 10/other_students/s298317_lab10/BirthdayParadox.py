# -*- coding: utf-8 -*-
"""Lab10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kn0HPhTxV3F0BFBISRhiqanTAPXbxcO4

## Birthday Paradox

Import Packages
"""
import pandas as pd
import numpy as np
import argparse
import random 
import math
from matplotlib import pyplot as plt
from scipy.stats import uniform

"""Initial Settings"""

parser = argparse.ArgumentParser()
parser.add_argument('--m', default = 100)
parser.add_argument('--runs', default = 100)
parser.add_argument('--days', default = 365)
parser.add_argument('--ci', default = 0.98)
args = parser.parse_args()

seed = 1507
inputs = range(0,args.m,3) # m people, ternately
runs = args.runs # number of runs
days = args.days # number of days
confInt = args.ci # confidence level, will be used to compute Confidence Interval

"""Compute Confidence Intervals"""

def ConfidenceInterval(x):
  t = uniform.ppf((confInt + 1) / 2) # threshold
  avg = x.mean() # avgrage
  stddev = x.std() # standard deviation
  ci = t * stddev / np.sqrt(runs) # confidence interval
  relErr = ci / avg # relative error
  return avg, ci, relErr

# Run the model for m people
def Simulator(m):
  # reset initial seed
  (random.seed(a = seed))
  # Create new 'conflict' array filled with zeros, and replace at each run according to the value of chosen day
  conflict = np.zeros(runs)
  for run in range(runs): # each run
    cDay = np.zeros(days) # chosen day
    for person in range(m): # each person
      # run day generator between 1 and 365
      day = random.randint(0,days-1)
      if cDay[day] == 1:
        conflict[run] = 1
        break
      else:
        cDay[day] = 1
  
  # Evaluate the confidence intervals
  avg, ci, relErr = ConfidenceInterval(conflict) 
  
  # Theoretical Formula
  theory =  1 - math.exp(-(m**2)/(2*days))  
  return m, theory, avg - ci, avg, avg + ci, relErr

"""Create Function for Plotting"""

def Plot(d):
  m = d["m"]
  avg = d["avg"]
  theory = d["Theory"]
  confIntUpper = d["confIntUpper"]
  confIntLower = d["confIntLower"]

  fig, ax = plt.subplots(figsize=(10, 5))
  plt.title(f'Simulation vs Theoretical Results ; {days} days, {runs} runs')
  plt.xlabel('Number of people')
  plt.ylabel('Probability conflict')

  plt.plot(m, avg, 'o-', label = "Simulation Result", color='red')
  plt.plot(m, theory, label = "Theoretical Value", color='blue' )
  plt.fill_between(m, confIntLower, confIntUpper, label = '%.2f Confidence Interval'%confInt, color = 'green', alpha = 0.3)
  
  plt.legend(loc = "upper left")
  plt.savefig('plot.png')
  plt.show()

"""Create Output File and Plot Graphs"""

# Create file for writing
outputfile = open("Birthday Paradox", "w")
print("m\tavg\tTheory\tconfIntUpper\tconfIntLower\tRelErr", file = outputfile)

# Print outputs and write on the file
print("Simulation running for ")
for m in inputs:
  print("Person number", m) 
  # get the output results
  output = Simulator(m) 
  # write on the Birthday Paradox file
  print(*output, sep ="\t",file = outputfile) 
outputfile.close()

print("Confidence level", confInt)
print("Number of runs", runs)
print("Number of days", days)

# Extract data and plot the graph
outData = pd.read_csv('Birthday Paradox', sep ="\t")
Plot(outData)