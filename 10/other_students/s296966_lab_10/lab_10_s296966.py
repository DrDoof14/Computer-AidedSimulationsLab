# -*- coding: utf-8 -*-
"""lab_10_s296966.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C2o0PXSrcBMbtTq7ySpiifg-xAwGhhbK
"""

from google.colab import drive 
drive.mount("/content/drive")

from datetime import datetime, timedelta
from scipy.stats import rv_discrete
import numpy as np
import pandas as pd

import plotly.express as px


import random

def generate_birthdays(group_size):
    jan_first = datetime(2000, 1, 1)  ## 用指定日期时间创建datetime
    birthday_list = [(jan_first + timedelta(days=random.randint(0, 366))).strftime("%m/%d/%Y") for _ in range(group_size)]
    return sorted(birthday_list)

def shared_bday(group_size):
    birthdays = generate_birthdays(group_size)
    #print(birthdays)
    for a, birthdayA in enumerate(birthdays):   #enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标
        for b, birthdayB in enumerate(birthdays[a + 1 :]):
            if birthdayA == birthdayB:
                return True

def generate_trials(group_size, trials):
    counts = 0
    for i in range(trials):
        if shared_bday(group_size) == True:
            counts +=1
    return round(float(counts)/trials*100,5)

def y_probability(births_list):
  y_probability=[]

  for num_birth in births_list:
    probability=num_birth/sum(births_list)
    y_probability.append(probability)
  return y_probability

def random_x(date_birth):
  x=[]
  for date in date_birth:
    x.append(int(date))
  return x


def self_direct(x,y,group_size): 
  my_discrete=rv_discrete(values=(x,y))
  date_rvs=my_discrete.rvs(size=group_size).tolist() 
  return date_rvs

def generate_birthdays_states(date_rvs):
  birthday_list_states=[]
  for date_rv in date_rvs:
    day = datetime.strptime(str(date_rv), '%Y%m%d').strftime('%m/%d/%Y')
    birthday_list_states.append(day)
  return birthday_list_states

def shared_bday_states(birthdays_lists):
    # birthdays_lists
    #print(birthdays)
    for a, birthdayA in enumerate(birthdays_lists):   #enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标
        for b, birthdayB in enumerate(birthdays_lists[a + 1 :]):
            if birthdayA == birthdayB:
                return True

def generate_trials_states(birthdays_lists, trials):
    counts = 0
    for i in range(trials):
        if shared_bday_states(birthdays_lists) == True:
            counts +=1
    return round(float(counts)/trials*100,5)



def generate_birthdays_reality(births_list,group_size):
    jan_first = datetime(2000, 1, 1)  
    probability_reality=y_probability(births_list)
    birthdaies = [(jan_first + timedelta(days=random.randint(0, 366))).strftime("%m/%d/%Y") for _ in range(366)]

    birthday_list =np.random.choice(birthdaies,group_size,p=probability_reality)

    return sorted(birthday_list)

def shared_bday_reality(births_list,group_size):
    birthdays = generate_birthdays_reality(births_list,group_size)
    #print(birthdays)
    for a, birthdayA in enumerate(birthdays):   #enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标
        for b, birthdayB in enumerate(birthdays[a + 1 :]):
            if birthdayA == birthdayB:
                return True

def generate_trials_reality(births_list,group_size, trials):
    counts = 0
    for i in range(trials):
        if shared_bday_reality(births_list,group_size) == True:
            counts +=1
    return round(float(counts)/trials*100,5)



#df_detect_1
number_student=[i for i in range(100+1)]
probabilities_1 = []
trials=10000

for group_size in number_student:
  # birthdays_1=generate_birthdays(group_size)
  probability=generate_trials(group_size, trials)
  probabilities_1.append(probability)

P=dict(zip(number_student,probabilities_1))
df_detect_1 = pd.DataFrame.from_dict(P,orient='index')
df_detect_1.rows='probability'
df_detect_1
# print(list(P.keys()))
# print(list(P.values()))

#df_detect_2

#set number of days in a year
numerator = 366
denominator = 366

#create empty list to store dictionary
probabilities_2 = []

#for loop to generate probabilities
for i in range(2, 100):
  numerator = numerator * (366 + 1 - i)
  denominator = denominator * 366
  probabilities_2.append({'group_size':i, 'probability':round((1 - (numerator / denominator))*100, 3)})
  #print(round(probabilities, 3))

df_detect_2 = pd.DataFrame(probabilities_2)
df_detect_2



#df_detect_3

import pandas as pd

input_file = "/content/drive/MyDrive/Computer simulation labs/lab_10/data-master/births/US_births_2000-2014_SSA.csv"
dataset = pd.read_csv(input_file)
df_birth_usa = pd.DataFrame(dataset)

cols = [0,1,2,4]
df_birth_usa = df_birth_usa[df_birth_usa.columns[cols]]
df_birth_usa

# df_tepm_1
df_tepm_1=df_birth_usa[['year','month','date_of_month']]
df_tepm_1.rename(columns = {'date_of_month':'day'}, inplace = True)
df_tepm_1=pd.to_datetime(df_tepm_1)


# df_tepm_2
df_tepm_2=df_birth_usa[['births']]

# df_tepm
df_tepm=pd.concat([df_tepm_1,df_tepm_2],axis=1)
df_tepm.rename(columns = {0:'date'}, inplace = True)

# df_tepm_year2000
df_tepm_year2000=df_tepm.set_index('date')['2000']


print(df_tepm_year2000.columns)
x=df_tepm_year2000.index.tolist()
y=df_tepm_year2000['births']

fig = px.line(df_tepm_2, x ,y, title='Probability of Sharing B-Day')
fig.show()

########
births_list=list(df_tepm_year2000['births'])
date_birth=df_tepm_year2000.index.strftime('%Y%m%d').tolist()


x=np.array(random_x(date_birth))  
y=np.array(y_probability(births_list))
key=[]
probabilities = []
probability_3=[]

for group_size in number_student:
  date_rvs=self_direct(x,y,group_size)
  birthdays_lists=generate_birthdays_states(date_rvs)
  
  a=generate_trials_states(birthdays_lists, trials)
  probabilities.append(a)

for keys,probability in enumerate(probabilities):
  key.append(keys)
  probability_3.append(probability)
      
df_detect_3=pd.DataFrame(probability_3,index=key)

df_detect_3



#df_detect_4

births_list=list(df_tepm_year2000['births'])
probabilities_4 = []
probabilities = []


key=[]
p=y_probability(births_list)

for group_size in number_student:

  probabilities.append(generate_trials_reality(births_list ,group_size, trials))

for keys,probability in enumerate(probabilities):
  key.append(keys)
  probabilities_4.append(probability)
    
df_detect_4=pd.DataFrame(probabilities,index=key)

df_detect_4



#graph probabilities
#load dataframe

x=df_detect_2['group_size']


fig = px.line(df_detect_2, x, y='probability', title='Probability of Birthday collision')
fig.show()

fig = px.line(df_detect_1, y=df_detect_1.columns, title='Probability of Sharing Birthday collision')
fig.show()

fig = px.line(df_detect_3, y=df_detect_1.columns, title='Probability of Sharing Birthday collision')
fig.show()

fig = px.line(df_detect_4, y=df_detect_1.columns, title='Probability of Sharing Birthday collision')
fig.show()

